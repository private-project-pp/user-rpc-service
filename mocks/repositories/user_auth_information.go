// Code generated by MockGen. DO NOT EDIT.
// Source: domain/user_auth_information.go
//
// Generated by this command:
//
//	mockgen -source=domain/user_auth_information.go -destination=mocks/repositories/user_auth_information.go -package=mocks_repository
//

// Package mocks_repository is a generated GoMock package.
package mocks_repository

import (
	reflect "reflect"

	entity "github.com/private-project-pp/user-rpc-service/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersAuthInformation is a mock of UsersAuthInformation interface.
type MockUsersAuthInformation struct {
	ctrl     *gomock.Controller
	recorder *MockUsersAuthInformationMockRecorder
	isgomock struct{}
}

// MockUsersAuthInformationMockRecorder is the mock recorder for MockUsersAuthInformation.
type MockUsersAuthInformationMockRecorder struct {
	mock *MockUsersAuthInformation
}

// NewMockUsersAuthInformation creates a new mock instance.
func NewMockUsersAuthInformation(ctrl *gomock.Controller) *MockUsersAuthInformation {
	mock := &MockUsersAuthInformation{ctrl: ctrl}
	mock.recorder = &MockUsersAuthInformationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersAuthInformation) EXPECT() *MockUsersAuthInformationMockRecorder {
	return m.recorder
}

// GetUserAuthList mocks base method.
func (m *MockUsersAuthInformation) GetUserAuthList() ([]entity.UsersAuthInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthList")
	ret0, _ := ret[0].([]entity.UsersAuthInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAuthList indicates an expected call of GetUserAuthList.
func (mr *MockUsersAuthInformationMockRecorder) GetUserAuthList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthList", reflect.TypeOf((*MockUsersAuthInformation)(nil).GetUserAuthList))
}

// GetUserByCredential mocks base method.
func (m *MockUsersAuthInformation) GetUserByCredential(email, username, password string) (entity.UsersAuthInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByCredential", email, username, password)
	ret0, _ := ret[0].(entity.UsersAuthInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByCredential indicates an expected call of GetUserByCredential.
func (mr *MockUsersAuthInformationMockRecorder) GetUserByCredential(email, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByCredential", reflect.TypeOf((*MockUsersAuthInformation)(nil).GetUserByCredential), email, username, password)
}

// SaveUserAuthInformation mocks base method.
func (m *MockUsersAuthInformation) SaveUserAuthInformation(in entity.UsersAuthInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAuthInformation", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserAuthInformation indicates an expected call of SaveUserAuthInformation.
func (mr *MockUsersAuthInformationMockRecorder) SaveUserAuthInformation(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAuthInformation", reflect.TypeOf((*MockUsersAuthInformation)(nil).SaveUserAuthInformation), in)
}
