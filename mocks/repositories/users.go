// Code generated by MockGen. DO NOT EDIT.
// Source: domain/users.go
//
// Generated by this command:
//
//	mockgen -source=domain/users.go -destination=mocks/repositories/users.go -package=mocks_repository
//

// Package mocks_repository is a generated GoMock package.
package mocks_repository

import (
	reflect "reflect"

	entity "github.com/private-project-pp/user-rpc-service/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
	isgomock struct{}
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// GetAllUsers mocks base method.
func (m *MockUsers) GetAllUsers() ([]entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUsersMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUsers)(nil).GetAllUsers))
}

// GetExistingUsers mocks base method.
func (m *MockUsers) GetExistingUsers(email, phoneNumber string) (entity.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExistingUsers", email, phoneNumber)
	ret0, _ := ret[0].(entity.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExistingUsers indicates an expected call of GetExistingUsers.
func (mr *MockUsersMockRecorder) GetExistingUsers(email, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExistingUsers", reflect.TypeOf((*MockUsers)(nil).GetExistingUsers), email, phoneNumber)
}

// SaveOrUpdateUser mocks base method.
func (m *MockUsers) SaveOrUpdateUser(in entity.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateUser", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateUser indicates an expected call of SaveOrUpdateUser.
func (mr *MockUsersMockRecorder) SaveOrUpdateUser(in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateUser", reflect.TypeOf((*MockUsers)(nil).SaveOrUpdateUser), in)
}
